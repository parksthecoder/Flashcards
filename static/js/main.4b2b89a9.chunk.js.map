{"version":3,"sources":["utils/api/index.js","Layout/comp/Header.js","Layout/NotFound.js","Layout/comp/Buttons.js","Layout/deck/DeckPreview.js","Layout/deck/DeckList.js","Layout/comp/Breadcrumb.js","Layout/form/FormArea.js","Layout/form/Form.js","Layout/card/CardView.js","Layout/deck/DeckView.js","Layout/card/Card.js","Layout/NotEnoughCards.js","Layout/deck/DeckStudy.js","Layout/deck/Deck.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","Header","className","NotFound","Buttons","names","removeDeck","removeCard","buttonsJSX","push","href","type","xmlns","width","height","fill","viewBox","d","fillRule","onClick","propTypes","PropTypes","arrayOf","oneOf","isRequired","number","func","DeckPreview","length","description","DeckList","decks","decksJSX","map","Breadcrumb","page","deckName","currentPage","FormArea","keys","idx","handleChange","formData","htmlFor","charAt","toUpperCase","slice","onChange","value","style","rows","Form","edit","addDeck","addCard","editDeck","editCard","history","abortController","useHistory","useParams","mode","initForm","useState","setDeck","setFormData","target","event","preventDefault","newItem","parseInt","useEffect","AbortController","front","back","getDeck","abort","onSubmit","CardView","DeckView","Object","cardsJSX","Card","cardNum","flipped","flip","next","NotEnoughCards","DeckStudy","setCardNum","setFlipped","window","confirm","Deck","path","Layout","setDecks","getDecks","log","created","edited","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b2b89a9.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Buttons component displays buttons based off of the names passed in\n * @param {ComponentProps} props - Properties passsed in for the component\n * @param {Array<string>} props.names - names of the buttons to show\n * @param {number} props.deckId - id of the deck they are at\n * @param {number} props.cardId - id of the card they are at\n * @param {function} props.removeDeck - Removes the deck passed in when called\n * @param {function} props.removeCard - Removes the cad passed in when called\n * @returns {ReactElement} JSX for Buttons component\n */\n\nfunction Buttons({ names, deckId, cardId, removeDeck, removeCard }) {\n  const buttonsJSX = [];\n\n  for (let name of names) {\n    switch (name) {\n      case \"view\":\n        buttonsJSX.push(\n          <a key=\"view\" href={`/decks/${deckId}`}>\n            <button type=\"button\" className=\"btn btn-secondary mr-2\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                fill=\"currentColor\"\n                className=\"bi bi-eye-fill\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\" />\n                <path d=\"M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z\" />\n              </svg>\n              &nbsp;View\n            </button>\n          </a>\n        );\n        break;\n\n      case \"study\":\n        buttonsJSX.push(\n          <a key=\"study\" href={`/decks/${deckId}/study`}>\n            <button type=\"button\" className=\"btn btn-primary mr-2\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                fill=\"currentColor\"\n                className=\"bi bi-journal-bookmark-fill\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M6 1h6v7a.5.5 0 0 1-.757.429L9 7.083 6.757 8.43A.5.5 0 0 1 6 8V1z\"\n                />\n                <path d=\"M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z\" />\n                <path d=\"M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z\" />\n              </svg>\n              &nbsp;Study\n            </button>\n          </a>\n        );\n        break;\n\n      case \"delete-deck\":\n        buttonsJSX.push(\n          <button\n            key=\"delete\"\n            type=\"button\"\n            className=\"btn btn-danger float-right\"\n            onClick={() => removeDeck(deckId)}\n          >\n            &nbsp;\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"20\"\n              fill=\"currentColor\"\n              className=\"bi bi-trash-fill\"\n              viewBox=\"0 0 20 20\"\n            >\n              <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\" />\n            </svg>\n          </button>\n        );\n        break;\n\n      case \"delete-card\":\n        buttonsJSX.push(\n          <button\n            key=\"delete\"\n            type=\"button\"\n            className=\"btn btn-danger float-right\"\n            onClick={() => removeCard(cardId)}\n          >\n            &nbsp;\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"20\"\n              fill=\"currentColor\"\n              className=\"bi bi-trash-fill\"\n              viewBox=\"0 0 20 20\"\n            >\n              <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\" />\n            </svg>\n          </button>\n        );\n        break;\n\n      case \"edit-deck\":\n        buttonsJSX.push(\n          <a key=\"edit-deck\" href={`/decks/${deckId}/edit`}>\n            <button type=\"button\" className=\"btn btn-secondary mr-2\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                fill=\"currentColor\"\n                className=\"bi bi-pencil-fill\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\" />\n              </svg>\n              &nbsp;Edit\n            </button>\n          </a>\n        );\n        break;\n\n      case \"edit-card\":\n        buttonsJSX.push(\n          <a key=\"edit-card\" href={`/decks/${deckId}/cards/${cardId}/edit`}>\n            <button\n              type=\"button\"\n              className=\"btn btcn-secondary mr-2 float-right\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                fill=\"currentColor\"\n                className=\"bi bi-pencil-fill\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\" />\n              </svg>\n              &nbsp;Edit\n            </button>\n          </a>\n        );\n        break;\n\n      case \"add-deck\":\n        buttonsJSX.push(\n          <a key=\"add-deck\" href=\"/decks/new\">\n            <button type=\"button\" className=\"btn btn-secondary mr-2\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                fill=\"currentColor\"\n                className=\"bi bi-plus\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\n              </svg>\n              Create Deck\n            </button>\n          </a>\n        );\n        break;\n\n      case \"add-card\":\n        buttonsJSX.push(\n          <a key=\"add-card\" href={`/decks/${deckId}/cards/new`}>\n            <button type=\"button\" className=\"btn btn-primary mr-2\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                fill=\"currentColor\"\n                className=\"bi bi-plus\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\n              </svg>\n              Add Cards\n            </button>\n          </a>\n        );\n        break;\n\n      default:\n        return null;\n    }\n  }\n  return buttonsJSX;\n}\n\nButtons.propTypes = {\n  names: PropTypes.arrayOf(\n    PropTypes.oneOf([\n      \"view\",\n      \"study\",\n      \"delete-deck\",\n      \"delete-card\",\n      \"edit-deck\",\n      \"edit-card\",\n      \"add-deck\",\n      \"add-card\",\n    ])\n  ).isRequired,\n  deckId: PropTypes.number,\n  cardId: PropTypes.number,\n  removeDeck: PropTypes.func,\n  removeCard: PropTypes.func,\n};\n\nexport default Buttons;\n","import React from \"react\";\nimport Buttons from \"../comp/Buttons\";\nimport PropTypes from \"prop-types\";\n\n/**\n * DeckPreview component shows name and description of each deck\n * as well as actions you can take with it\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {Object} props.deck - deck object representing a stack of cards\n * @param {function} props.removeDeck - removes the deck passed in when called\n * @returns {ReactElement} JSX for a DeckPreview component\n */\n\nfunction DeckPreview({ deck, removeDeck }) {\n    return (\n        <div className=\"card mt-2\" id={`deck-${deck.id}`}>\n            <div className=\"card-body\">\n                <p className=\"card-subtitle mb-2 text muted float-right\">{deck.cards.length} cards</p>\n                <h4 className=\"card-title\">{deck.name}</h4>\n                <p className=\"card-text\">{deck.description}</p>\n                <Buttons names={[\"view\", \"study\", \"delete-deck\"]} deckId={deck.id} removeDeck={removeDeck} />\n            </div>\n        </div>\n    );\n}\n\nDeckPreview.propTypes = {\n    deck: PropTypes.shape({\n        \"name\": PropTypes.string.isRequired,\n        \"description\": PropTypes.string.isRequired,\n        \"id\": PropTypes.number.isRequired,\n    }).isRequired,\n    removeDeck: PropTypes.func.isRequired,\n};\n\nexport default DeckPreview;","import React from \"react\";\nimport DeckPreview from \"./DeckPreview\";\nimport Buttons from \"../comp/Buttons\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Decklist component contains a list of DeckView components\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {Array<Object>} props.deck - array of all deck objects\n * @param {function} props.removeDeck - removes the deck passed in when called\n * @returns {ReactElement} JSX for a DeckList component\n */\n\nfunction DeckList({ decks, removeDeck }) {\n  const decksJSX = decks.map((deck) => (\n    <DeckPreview key={deck.id} deck={deck} removeDeck={removeDeck} />\n  ));\n\n  return (\n    <div>\n      <Buttons names={[\"add-deck\"]} />\n      {decksJSX}\n    </div>\n  );\n}\n\nDeckList.propTypes = {\n  decks: PropTypes.arrayOf(\n    PropTypes.shape({\n    //   name: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    }).isRequired\n  ).isRequired,\n  removeDeck: PropTypes.func.isRequired,\n};\n\nexport default DeckList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Breadcrumb component displayed on certain pages\n * provides a trail of links the user is currently on\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {string} props.page - current page the user is on\n * @param {string} props.deckName - name of the deck user is on\n * @param {number} props.deckId - id of the deck user is on\n * @param {number} props.cardId - id of the card user is on\n * @returns {ReactElement} JSX for a Breadcrumb component\n */\n\nfunction Breadcrumb({ page, deckName, deckId, cardId }) {\n  /**\n   * Gets appropriate text based on current page\n   * @returns {ReactElement} - JSX of an <li> element\n   */\n  const currentPage = () => {\n    switch (page) {\n      case \"study\":\n        return <li className=\"breadcrumb-item active\">Study</li>;\n      case \"create-deck\":\n        return <li className=\"breadcrumb-item active\">Create Deck</li>;\n      case \"edit-deck\":\n        return <li className=\"breadcrumb-item active\">Edit Deck</li>;\n      case \"create-card\":\n        return <li className=\"breadcrumb-item active>\">Add Card</li>;\n      case \"edit-card\":\n        return <li className=\"breadcrumb-item active\">Edit Card</li>;\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * Gets deck title and adds the active class if appropriate\n   * @returns {ReactElement} JSX of an <li> element\n   */\n  const deckTitle = () => {\n    if (!deckName || !deckId) return null;\n\n    return (\n      <li className={`breadcrumb-item ${page === \"view\" ? \"active\" : \"\"}`}>\n        {page === \"view\" ? (\n          deckName\n        ) : (\n          <a href={`/decks/${deckId}`}>{deckName}</a>\n        )}\n      </li>\n    );\n  };\n\n  return (\n    <div id=\"deck-study\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <a href=\"/\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                fill=\"currentColor\"\n                className=\"bi bi-house-door-fill\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M6.5 14.5v-3.505c0-.245.25-.495.5-.495h2c.25 0 .5.25.5.5v3.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5z\" />\n              </svg>\n              Home\n            </a>\n          </li>\n          {deckTitle()}\n          {currentPage()}\n        </ol>\n      </nav>\n    </div>\n  );\n}\n\nBreadcrumb.propTypes = {\n  page: PropTypes.string.isRequired,\n  deckName: PropTypes.string,\n  deckId: PropTypes.number,\n  cardId: PropTypes.number,\n};\n\nexport default Breadcrumb;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A FormArea component displays a text area for a <form>\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {Array<string>} props.keys - Form area ids\n * @param {number} props.idx - Either 0 or 1\n * @param {function} props.handleChange - Handles changes made by user when called\n * @param {formData} props.formData - The current values of the form\n * @returns {ReactElement} JSX for a FormArea component\n */\n\nfunction FormArea({ keys, idx, handleChange, formData }) {\n  return (\n    <div id={keys[idx]}>\n      <label htmlFor={keys[idx]}>\n        {keys[idx].charAt(0).toUpperCase() + keys[idx].slice(1)}\n      </label>\n\n      <br />\n\n      {keys[idx] === \"name\" ? (\n        <input\n          name=\"name\"\n          id=\"name\"\n          type=\"text\"\n          onChange={handleChange}\n          value={formData[keys[idx]]}\n          style={{ width: \"100%\" }}\n        />\n      ) : (\n        <textarea\n          name={keys[idx]}\n          id={keys[idx]}\n          onChange={handleChange}\n          value={formData[keys[idx]]}\n          style={{ width: \"100%\" }}\n          rows=\"4\"\n        />\n      )}\n    </div>\n  );\n}\n\nFormArea.propTypes = {\n  keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n  idx: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  formData: PropTypes.object.isRequired,\n};\n\nexport default FormArea;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router\";\nimport { readDeck, readCard } from \"../../utils/api/index\";\nimport Breadcrumb from \"../comp/Breadcrumb\";\nimport FormArea from \"./FormArea\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A Form component is used to create and edit decks and cards\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {string} props.type - Either \"deck\" or \"card\"\n * @param {boolean} props.edit - True if user is editing\n * @param {function} props.addDeck - Adds the deck passed in when called\n * @param {function} props.addCard - Adds the card passed in to a deck when called\n * @param {function} props.editDeck - Edits the deck passed in when called.\n * @param {function} props.editCard - Edits the card passed in when called\n * @param {AbortController} props.abortController -AbortController\n * @returns {ReactElement} JSX for a Form component\n */\n\nfunction Form({ type, edit, addDeck, addCard, editDeck, editCard, abortController }) {\n    const history = useHistory();\n    let { deckId, cardId } = useParams();\n    const mode = edit ? \"edit\" : \"create\";\n    const keys = type === \"deck\" ? [\"name\", \"description\"] : [\"front\", \"back\"];\n\n    const initForm = {\n        [keys[0]]: \"\",\n        [keys[1]]: \"\",\n    };\n\n    const [deck, setDeck] = useState({});\n    const [formData, setFormData] = useState({...initForm});\n\n    //get deck when first rendered\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function getDeck() {\n            if(type === \"deck\" && !edit) return;\n    \n            try {\n                const response = await readDeck(deckId, abortController.signal);\n                setDeck(response);\n    \n                // update values if we are editing existing items\n                if(edit) {\n                    if(response && type === \"deck\") {\n                        initForm[keys[0]] = response.name;\n                        initForm[keys[1]] = response.description;\n                    }\n                    else if(type === \"card\") {\n                        const card = await readCard(cardId, abortController.signal);\n                        if(card) {\n                            initForm[keys[0]] = card.front;\n                            initForm[keys[1]] = card.back\n                        }\n                    }\n                    setFormData({...initForm})\n                }\n            }\n            catch(error) {\n                if(error.name !== \"AbortError\") {\n                    throw error\n                }\n            }\n        }\n\n        getDeck();\n\n        return () => {\n            abortController.abort();\n        };\n    }, [])\n\n    /**\n     * Fetches the current deck from the database\n     */\n\n    /**\n     * Handles any from change made by the user\n     * @param {Event} event - onChange event\n     * @param {EventTarget} target - The element from which this change occured\n     */\n    function handleChange({ target }) {\n        setFormData({...formData, [target.name]: target.value});\n    }\n\n    /**\n     * Handles any submit made by the user\n     * @param {Event} event - submit event\n     */\n    async function handleSubmit(event) {\n        event.preventDefault();\n        let newItem = {\n            [keys[0]]: formData[keys[0]],\n            [keys[1]]: formData[keys[1]],\n        };\n\n        // if edit --> make sure that item has appropriate id keys\n        if(edit) {\n            newItem[\"id\"] = type === \"deck\" ? parseInt(deckId) : parseInt(cardId);\n\n            if(type === \"card\") {\n                newItem[\"deckId\"] = parseInt(deckId);\n            }\n        }\n\n        // call appropriate function\n        const idx = edit ?\n            (type === \"deck\" ? await editDeck(newItem) : await editCard(newItem)) :\n            (type === \"deck\" ? await addDeck(newItem) : await addCard(newItem))\n        // if new deck --> get id\n        if(!edit && type === \"deck\"){\n            deckId = idx;\n        }  \n        \n        history.push(`/decks/$(deckId)`);\n    }\n\n\treturn (\n\t\t<div id={`${type}-form-${mode}`}>\n\t\t\t<Breadcrumb \n\t\t\t\tpage={`${mode}-${type}`} \n\t\t\t\tdeckName={deck ? deck.name : null} \n\t\t\t\tdeckId={parseInt(deckId)} \n\t\t\t\tcardId={cardId ? parseInt(cardId) : null}\n\t\t\t/>\n\n\t\t\t<h1>\n\t\t\t\t{type === \"card\" && `${deck.name}: `}\n\t\t\t\t{mode.charAt(0).toUpperCase() + mode.slice(1)}&nbsp;\n\t\t\t\t{type.charAt(0).toUpperCase() + type.slice(1)}&nbsp;\n\t\t\t</h1>\n\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<FormArea\n\t\t\t\t\tkeys={keys}\n\t\t\t\t\tidx={0}\n\t\t\t\t\thandleChange={handleChange}\n\t\t\t\t\tformData={formData}\n\t\t\t\t/>\n\n\t\t\t\t<FormArea\n\t\t\t\t\tkeys={keys}\n\t\t\t\t\tidx={1}\n\t\t\t\t\thandleChange={handleChange}\n\t\t\t\t\tformData={formData}\n\t\t\t\t/>\n\n\t\t\t\t<a href=\"/\">\n\t\t\t\t\t<button className=\"btn btn-secondary mr-1\" type=\"button\">Cancel</button>\n\t\t\t\t</a>\n\n\t\t\t\t<button className=\"btn btn-primary mr-1\" type=\"submit\">Submit</button>\n\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nForm.propTypes = {\n\ttype: PropTypes.oneOf([\"deck\", \"card\"]).isRequired, \n\tedit: PropTypes.bool.isRequired, \n\taddDeck: PropTypes.func,\n\taddCard: PropTypes.func, \n\teditDeck: PropTypes.func, \n\teditCard: PropTypes.func,\n\tabortController: PropTypes.instanceOf(AbortController).isRequired\n};\n\nexport default Form;","import React from \"react\";\nimport Buttons from \"../comp/Buttons\";\nimport PropTypes from \"prop-types\";\n\n/**\n * CardView component is used when viewing a deck.\n * shows both sides of the card as well as <Buttons /> to delete/edit the card\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {Object} props.card - card object representing a flashcard\n * @param {function} props.removeCard - removes the card passed in when called\n * @returns {ReactElement} - JSX for CardView component\n */\n\nfunction CardView({ card, removeCard }) {\n  return (\n    <ul className=\"list-group\">\n      <li className=\"list-group-item\">{card.front}</li>\n      <li className=\"list-group-item\">{card.back} </li>\n      <li className=\"list-group-item\">\n        <Buttons\n          names={[\"delete-card\", \"edit-card\"]}\n          removeCard={removeCard}\n          deckId={card.deckId}\n          cardId={card.id}\n        />\n      </li>\n    </ul>\n  );\n}\n\nCardView.propTypes = {\n  card: PropTypes.shape({\n    front: PropTypes.string.isRequired,\n    back: PropTypes.string.isRequired,\n    deckId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  removeCard: PropTypes.func.isRequired,\n};\n\nexport default CardView;\n","import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../../utils/api/index\";\nimport { useParams } from \"react-router-dom\";\nimport Breadcrumb from \"../comp/Breadcrumb\";\nimport Buttons from \"../comp/Buttons\";\nimport CardView from \"../card/CardView\";\nimport PropTypes from \"prop-types\";\n\n/**\n * DeckView component displayed information about the deck\n * as well as all of its cards\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {function} props.removeDeck - Removes the deck passed in when called\n * @param {function} props.removeCard - Removes the card passed in when called\n * @param {AbortController} props.abortController - AbortController\n * @returns {ReactElement} JSX for DeckView component\n */\n\nfunction DeckView({ removeDeck, removeCard, abortController }) {\n  const [deck, setDeck] = useState({});\n  const { deckId } = useParams();\n\n  //get deck when first rendered\n  useEffect(() => {\n      const abortController = new AbortController();\n\n      async function getDeck() {\n        try {\n          const response = await readDeck(deckId, abortController.signal);\n          setDeck(response);\n        } catch (error) {\n          if (error.name !== \"AbortError\") {\n            throw error;\n          }\n        }\n      }\n    getDeck();\n\n    return () => {\n      abortController.abort();\n    };\n  }, []);\n\n  if (Object.keys(deck).length === 0) return null;\n\n  const cardsJSX = deck.cards.map((card) => (\n    <CardView key={card.id} card={card} removeCard={removeCard} />\n  ));\n\n  return (\n    <div id={`deck-${deck.id}-view`}>\n      <Breadcrumb deckName={deck.name} deckId={deck.id} page=\"view\" />\n      <h5>{deck.name}</h5>\n      <p>{deck.description}</p>\n\n      <Buttons\n        names={[\"edit-deck\", \"study\", \"add-card\", \"delete-deck\"]}\n        deckId={deck.id}\n        removeDeck={removeDeck}\n      />\n\n      <h3 className=\"mt-4\">Cards</h3>\n      {cardsJSX}\n    </div>\n  );\n}\n\nDeckView.propTypes = {\n  removeDeck: PropTypes.func,\n  removeCard: PropTypes.func,\n  abortController: PropTypes.instanceOf(AbortController).isRequired,\n};\n\nexport default DeckView;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Card component used during a Study session.\n * Shows the front side and can be flipped to the back side\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {Object} props.deck - deck object represents a stack of cards\n * @param {number} props.cardNum - index of the card\n * @param {boolean} props.flipped - whether card is currently flipped\n * @param {function} props.flip - flips the card when callled\n * @param {function} props.next - Goes to the next card when called\n * @returns {ReactElement} JSX for a Card component\n */\n\nfunction Card({ deck, cardNum, flipped, flip, next }) {\n  return (\n    <div className=\"card mt-2\" id={`card-${deck.id}`}>\n      <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          Card {cardNum + 1} of {deck.cards.length}\n        </h4>\n        <p className=\"card-text\">\n          {deck.cards[cardNum][flipped ? \"back\" : \"front\"]}\n        </p>\n        <button type=\"button\" className=\"btn btn-secondary mr-2\" onClick={flip}>\n          Flip\n        </button>\n        {flipped && (\n          <button type=\"button\" className=\"btn btn-primary mr-2\" onClick={next}>\n            Next\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nCard.propTypes = {\n  deck: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n  cardNum: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  flip: PropTypes.func.isRequired,\n  next: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React from \"react\";\nimport Buttons from \"./comp/Buttons\";\nimport PropTypes from \"prop-types\";\n\n/**\n * NotEnoughCards component is displayed when user tries to\n * study a deck with too little cards\n * @param {ComponentProps} props - Properties passed in for the component\n * @param {number} length - how many cards are in the deck\n * @param {number} id - the id of the deck they are in\n * @returns {ReactElement} JSX for NotEnoughCards component\n */\n\nfunction NotEnoughCards({ length, id }) {\n    return (\n        <div id=\"card-error\">\n            <h3>Not enough cards.</h3>\n            <p>You need at least 3 cards to study. There are {length} cards in this deck.</p>\n\n            <Buttons names={[\"add-card\"]} deckId={id}/>\n        </div>\n    );\n}\n\nNotEnoughCards.propTypes = {\n    length: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n};\n\nexport default NotEnoughCards;","import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api/index\";\nimport Breadcrumb from \"../comp/Breadcrumb\";\nimport Card from \"../card/Card\";\nimport NotEnoughCards from \"../NotEnoughCards\";\nimport PropTypes from \"prop-types\";\n\n/**\n * DeckStudy component will run through the cards in a deck object\n * @param {AbortController} props.abortController - AbortController\n * @returns {ReactElement} JSX for a DeckStudy component\n */\n\nfunction DeckStudy({ abortController }) {\n    const [ cardNum, setCardNum ] = useState(0);\n    const [ flipped, setFlipped ] = useState(false);\n    const history = useHistory();\n    const [ deck, setDeck ] = useState({});\n    const { deckId } = useParams();\n\n    // get deck when first rendered\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function getDeck() {\n            try {\n                const response = await readDeck(deckId, abortController.signal);\n                setDeck(response);\n            }\n            catch(error) {\n                if(error.name !== \"AbortError\") {\n                    throw error;\n                }\n            }\n        }\n        getDeck();\n        return () => {\n            abortController.abort();\n        };\n    }, []);\n\n    // fetches current deck from the database\n\n\n    if(Object.keys(deck).length === 0) return null;\n\n    if(!deck) return null\n\n    // Flips the current card\n    function flip() {\n        setFlipped(!flipped);\n    }\n\n    // Goes to next card,\n    // or prompts user to go through the deck again\n    function next() {\n        if(cardNum + 1 === deck.cards.length) {\n            if(window.confirm(`Restart cards?\\n\\nClick 'cancel' to return to the home page.`)) {\n                setCardNum(0);\n            } else {\n                history.push(\"/\");\n            }\n        } else {\n            setCardNum(cardNum + 1);\n        }\n        setFlipped(false);\n    }\n\n    return (\n        <div id={`deck-${deck.id}-study`}>\n            <Breadcrumb deckName={deck.name} deckId={deck.id} page=\"study\" />\n            <h1>Study: {deck.name}</h1>\n\n            {deck.cards.length > 2 ? \n            <Card\n                key={deck.cards[cardNum].id}\n                deck={deck}\n                cardNum={cardNum}\n                flipped={flipped}\n                flip={flip}\n                next={next}\n            /> :\n            <NotEnoughCards length={deck.cards.length} id={deck.id} />}\n        </div>\n    );\n}\n\nDeckStudy.propTypes = {\n    abortController: PropTypes.instanceOf(AbortController).isRequired,\n};\n\nexport default DeckStudy;\n","import React from \"react\";\nimport { Switch, Route, useParams } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport Form from \"../form/Form\";\nimport DeckView from \"./DeckView\";\nimport DeckStudy from \"./DeckStudy\";\n\n/**\n * Deck component displays deck-related pages, depending on URL\n * @param {ComponentProps} props - Properties passed in for component\n * @param {function} props.editDeck - Edits the deck passed in when called\n * @param {function} props.removeDeck - Removes the deck passed in when called\n * @param {function} props.addCard - Adds the card passed in to a deck when called\n * @param {function} props.editCard - Edits the card passed in when called\n * @param {function} props.removeCard - Removes the card passed in when called\n * @param {AbortController} props.abortController - AbortController\n * @returns {ReactElement} JSX for a Deck component\n */\n\nfunction Deck({\n  editDeck,\n  removeDeck,\n  addCard,\n  editCard,\n  removeCard,\n  abortController,\n}) {\n  const { deckId } = useParams();\n\n  return (\n    <div id={`deck=${deckId}`}>\n      <Switch>\n        <Route path=\"/decks/:deckId/study\">\n          <DeckStudy abortController={abortController} />\n        </Route>\n\n        <Route path=\"/decks/:deckId/edit\">\n          <Form\n            type=\"deck\"\n            edit={true}\n            editDeck={editDeck}\n            abortController={abortController}\n          />\n        </Route>\n\n        <Route path=\"/decks/:deckId/cards/new\">\n          <Form\n            type=\"card\"\n            edit={false}\n            addCard={addCard}\n            abortController={abortController}\n          />\n        </Route>\n\n        <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n          <Form\n            type=\"card\"\n            edit={true}\n            editCard={editCard}\n            abortController={abortController}\n          />\n        </Route>\n\n        <Route path=\"/decks/:deckId\">\n          <DeckView\n            removeDeck={removeDeck}\n            removeCard={removeCard}\n            abortController={abortController}\n          />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nDeck.propTypes = {\n  editDeck: PropTypes.func.isRequired,\n  removeDeck: PropTypes.func.isRequired,\n  addCard: PropTypes.func.isRequired,\n  editCard: PropTypes.func.isRequired,\n  removeCard: PropTypes.func.isRequired,\n  abortController: PropTypes.instanceOf(AbortController).isRequired,\n};\n\nexport default Deck;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport {\n  listDecks,\n  deleteDeck,\n  createDeck,\n  deleteCard,\n  updateDeck,\n  createCard,\n  updateCard,\n} from \"../utils/api/index\";\n\nimport Header from \"./comp/Header\";\nimport NotFound from \"./NotFound\";\nimport DeckList from \"./deck/DeckList\";\nimport Deck from \"./deck/Deck\";\nimport Form from \"./form/Form\";\n\n\n\nfunction Layout() {\n  const [decks, setDecks] = useState([]);\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n  const history = useHistory();\n\n  async function getDecks() {\n    try {\n      const response = await listDecks(signal);\n      console.log(\"=response=>\",response, \"<==\")\n      setDecks(response);\n    } catch (error) {\n      console.log(\"=error=>\",error, \"<==\")\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  }\n\n\n  // get decks when first rendered\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    getDecks();\n\n    return () => {\n      abortController.abort();\n    };\n  }, []);\n\n  /**\n   * Fetches all current decks form the database\n   * -- using listDecks from utils/api/index.js -> API call\n   */\n\n  /**\n   * Posts a deck to the database\n   * -- using createDeck from utils/api/index.js -> API call\n   * @param {Object} deck - deck object represents a stack of cards\n   * @returns {number} The id of created deck\n   */\n  async function addDeck(deck) {\n    const created = await createDeck(deck, signal);\n    getDecks();\n    return created.id;\n  }\n\n  /**\n   * Posts a card to the database\n   * @param {Object} card - Card object represents a flashcard\n   * @param {number} id - id of the deck to post card in\n   * @returns {number} - the id of the newly created card\n   */\n  async function addCard(card, id) {\n    const created = await createCard(id, card, signal);\n    getDecks();\n    return created.id;\n  }\n\n  /**\n   * Updates a deck in the database\n   * @param {Object} deck - a deck object representing a stack of cards\n   * @returns {number} - id of the newly edited deck\n   */\n  async function editDeck(deck) {\n    const edited = await updateDeck(deck, signal);\n    getDecks();\n    return edited.id;\n  }\n\n  /**\n   * Updates a card in the database\n   * @param {Object} card - card object representing a flashcard\n   * @returns {number} - id of the newly edited card\n   */\n  async function editCard(card) {\n    const edited = await updateCard(card, signal);\n    getDecks();\n    return edited.id;\n  }\n\n  /**\n   * Delete a deck in the database\n   * @param {Object} id - id of the deck to delete\n   */\n  async function removeDeck(id) {\n    if (\n      window.confirm(`Delete this deck?/n/nYou will not be able to recover it.`)\n    ) {\n      await deleteDeck(id, signal);\n      getDecks();\n      history.push(\"/\");\n    }\n  }\n\n  /**\n   * Delete a card in the database\n   * @param {Object} id - id of the card to delete\n   */\n  async function removeCard(id) {\n    if (\n      window.confirm(`Delete this card?/n/nYou will not be able to recover it.`)\n    ) {\n      await deleteCard(id, signal);\n      getDecks();\n    }\n  }\n\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route exact path=\"/\">\n            <DeckList decks={decks} removeDeck={removeDeck} />\n          </Route>\n\n          <Route path=\"/decks/new\">\n            <Form\n              type=\"deck\"\n              edit={false}\n              addDeck={addDeck}\n              abortController={abortController}\n            />\n          </Route>\n\n          <Route path=\"/decks/:deckId/\">\n            <Deck\n              editDeck={editDeck}\n              removeDeck={removeDeck}\n              addCard={addCard}\n              editCard={editCard}\n              removeCard={removeCard}\n              abortController={abortController}\n            />\n          </Route>\n\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}